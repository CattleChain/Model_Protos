// source: protos/dairyIdentity.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

goog.exportSymbol('proto.cattlechain.DairyIdentity', null, global);
goog.exportSymbol('proto.cattlechain.DairyIdentity.ADDRESS', null, global);
goog.exportSymbol('proto.cattlechain.DairyIdentity.CONTACTPOINT', null, global);
goog.exportSymbol('proto.cattlechain.DairyIdentity.LOCATION', null, global);
goog.exportSymbol('proto.cattlechain.DairyIdentity.RELATEDSOURCE', null, global);
goog.exportSymbol('proto.cattlechain.DairyMonitoring', null, global);
goog.exportSymbol('proto.cattlechain.DairyWelfareIndicators', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.cattlechain.DairyIdentity = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.cattlechain.DairyIdentity.repeatedFields_, null);
};
goog.inherits(proto.cattlechain.DairyIdentity, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.cattlechain.DairyIdentity.displayName = 'proto.cattlechain.DairyIdentity';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.cattlechain.DairyIdentity.CONTACTPOINT = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.cattlechain.DairyIdentity.CONTACTPOINT, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.cattlechain.DairyIdentity.CONTACTPOINT.displayName = 'proto.cattlechain.DairyIdentity.CONTACTPOINT';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.cattlechain.DairyIdentity.ADDRESS = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.cattlechain.DairyIdentity.ADDRESS, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.cattlechain.DairyIdentity.ADDRESS.displayName = 'proto.cattlechain.DairyIdentity.ADDRESS';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.cattlechain.DairyIdentity.LOCATION = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.cattlechain.DairyIdentity.LOCATION.repeatedFields_, null);
};
goog.inherits(proto.cattlechain.DairyIdentity.LOCATION, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.cattlechain.DairyIdentity.LOCATION.displayName = 'proto.cattlechain.DairyIdentity.LOCATION';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.cattlechain.DairyIdentity.RELATEDSOURCE = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.cattlechain.DairyIdentity.RELATEDSOURCE, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.cattlechain.DairyIdentity.RELATEDSOURCE.displayName = 'proto.cattlechain.DairyIdentity.RELATEDSOURCE';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.cattlechain.DairyMonitoring = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.cattlechain.DairyMonitoring, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.cattlechain.DairyMonitoring.displayName = 'proto.cattlechain.DairyMonitoring';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.cattlechain.DairyWelfareIndicators = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.cattlechain.DairyWelfareIndicators, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.cattlechain.DairyWelfareIndicators.displayName = 'proto.cattlechain.DairyWelfareIndicators';
}

/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.cattlechain.DairyIdentity.repeatedFields_ = [11,12,13];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.cattlechain.DairyIdentity.prototype.toObject = function(opt_includeInstance) {
  return proto.cattlechain.DairyIdentity.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.cattlechain.DairyIdentity} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.cattlechain.DairyIdentity.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: jspb.Message.getFieldWithDefault(msg, 1, ""),
    type: jspb.Message.getFieldWithDefault(msg, 2, ""),
    datacreated: jspb.Message.getFieldWithDefault(msg, 3, ""),
    datamodified: jspb.Message.getFieldWithDefault(msg, 4, ""),
    name: jspb.Message.getFieldWithDefault(msg, 5, ""),
    description: jspb.Message.getFieldWithDefault(msg, 6, ""),
    contactpoint: (f = msg.getContactpoint()) && proto.cattlechain.DairyIdentity.CONTACTPOINT.toObject(includeInstance, f),
    ownedby: jspb.Message.getFieldWithDefault(msg, 8, ""),
    address: (f = msg.getAddress()) && proto.cattlechain.DairyIdentity.ADDRESS.toObject(includeInstance, f),
    location: (f = msg.getLocation()) && proto.cattlechain.DairyIdentity.LOCATION.toObject(includeInstance, f),
    relatedsourceList: jspb.Message.toObjectList(msg.getRelatedsourceList(),
    proto.cattlechain.DairyIdentity.RELATEDSOURCE.toObject, includeInstance),
    monitoringList: jspb.Message.toObjectList(msg.getMonitoringList(),
    proto.cattlechain.DairyMonitoring.toObject, includeInstance),
    indicatorsList: jspb.Message.toObjectList(msg.getIndicatorsList(),
    proto.cattlechain.DairyWelfareIndicators.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.cattlechain.DairyIdentity}
 */
proto.cattlechain.DairyIdentity.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.cattlechain.DairyIdentity;
  return proto.cattlechain.DairyIdentity.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.cattlechain.DairyIdentity} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.cattlechain.DairyIdentity}
 */
proto.cattlechain.DairyIdentity.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setId(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setType(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setDatacreated(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setDatamodified(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 6:
      var value = /** @type {string} */ (reader.readString());
      msg.setDescription(value);
      break;
    case 7:
      var value = new proto.cattlechain.DairyIdentity.CONTACTPOINT;
      reader.readMessage(value,proto.cattlechain.DairyIdentity.CONTACTPOINT.deserializeBinaryFromReader);
      msg.setContactpoint(value);
      break;
    case 8:
      var value = /** @type {string} */ (reader.readString());
      msg.setOwnedby(value);
      break;
    case 9:
      var value = new proto.cattlechain.DairyIdentity.ADDRESS;
      reader.readMessage(value,proto.cattlechain.DairyIdentity.ADDRESS.deserializeBinaryFromReader);
      msg.setAddress(value);
      break;
    case 10:
      var value = new proto.cattlechain.DairyIdentity.LOCATION;
      reader.readMessage(value,proto.cattlechain.DairyIdentity.LOCATION.deserializeBinaryFromReader);
      msg.setLocation(value);
      break;
    case 11:
      var value = new proto.cattlechain.DairyIdentity.RELATEDSOURCE;
      reader.readMessage(value,proto.cattlechain.DairyIdentity.RELATEDSOURCE.deserializeBinaryFromReader);
      msg.addRelatedsource(value);
      break;
    case 12:
      var value = new proto.cattlechain.DairyMonitoring;
      reader.readMessage(value,proto.cattlechain.DairyMonitoring.deserializeBinaryFromReader);
      msg.addMonitoring(value);
      break;
    case 13:
      var value = new proto.cattlechain.DairyWelfareIndicators;
      reader.readMessage(value,proto.cattlechain.DairyWelfareIndicators.deserializeBinaryFromReader);
      msg.addIndicators(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.cattlechain.DairyIdentity.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.cattlechain.DairyIdentity.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.cattlechain.DairyIdentity} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.cattlechain.DairyIdentity.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getType();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getDatacreated();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getDatamodified();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      5,
      f
    );
  }
  f = message.getDescription();
  if (f.length > 0) {
    writer.writeString(
      6,
      f
    );
  }
  f = message.getContactpoint();
  if (f != null) {
    writer.writeMessage(
      7,
      f,
      proto.cattlechain.DairyIdentity.CONTACTPOINT.serializeBinaryToWriter
    );
  }
  f = message.getOwnedby();
  if (f.length > 0) {
    writer.writeString(
      8,
      f
    );
  }
  f = message.getAddress();
  if (f != null) {
    writer.writeMessage(
      9,
      f,
      proto.cattlechain.DairyIdentity.ADDRESS.serializeBinaryToWriter
    );
  }
  f = message.getLocation();
  if (f != null) {
    writer.writeMessage(
      10,
      f,
      proto.cattlechain.DairyIdentity.LOCATION.serializeBinaryToWriter
    );
  }
  f = message.getRelatedsourceList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      11,
      f,
      proto.cattlechain.DairyIdentity.RELATEDSOURCE.serializeBinaryToWriter
    );
  }
  f = message.getMonitoringList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      12,
      f,
      proto.cattlechain.DairyMonitoring.serializeBinaryToWriter
    );
  }
  f = message.getIndicatorsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      13,
      f,
      proto.cattlechain.DairyWelfareIndicators.serializeBinaryToWriter
    );
  }
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.cattlechain.DairyIdentity.CONTACTPOINT.prototype.toObject = function(opt_includeInstance) {
  return proto.cattlechain.DairyIdentity.CONTACTPOINT.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.cattlechain.DairyIdentity.CONTACTPOINT} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.cattlechain.DairyIdentity.CONTACTPOINT.toObject = function(includeInstance, msg) {
  var f, obj = {
    email: jspb.Message.getFieldWithDefault(msg, 1, ""),
    telephone: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.cattlechain.DairyIdentity.CONTACTPOINT}
 */
proto.cattlechain.DairyIdentity.CONTACTPOINT.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.cattlechain.DairyIdentity.CONTACTPOINT;
  return proto.cattlechain.DairyIdentity.CONTACTPOINT.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.cattlechain.DairyIdentity.CONTACTPOINT} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.cattlechain.DairyIdentity.CONTACTPOINT}
 */
proto.cattlechain.DairyIdentity.CONTACTPOINT.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setEmail(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setTelephone(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.cattlechain.DairyIdentity.CONTACTPOINT.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.cattlechain.DairyIdentity.CONTACTPOINT.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.cattlechain.DairyIdentity.CONTACTPOINT} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.cattlechain.DairyIdentity.CONTACTPOINT.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getEmail();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getTelephone();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * optional string email = 1;
 * @return {string}
 */
proto.cattlechain.DairyIdentity.CONTACTPOINT.prototype.getEmail = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.cattlechain.DairyIdentity.CONTACTPOINT} returns this
 */
proto.cattlechain.DairyIdentity.CONTACTPOINT.prototype.setEmail = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string telephone = 2;
 * @return {string}
 */
proto.cattlechain.DairyIdentity.CONTACTPOINT.prototype.getTelephone = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.cattlechain.DairyIdentity.CONTACTPOINT} returns this
 */
proto.cattlechain.DairyIdentity.CONTACTPOINT.prototype.setTelephone = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.cattlechain.DairyIdentity.ADDRESS.prototype.toObject = function(opt_includeInstance) {
  return proto.cattlechain.DairyIdentity.ADDRESS.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.cattlechain.DairyIdentity.ADDRESS} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.cattlechain.DairyIdentity.ADDRESS.toObject = function(includeInstance, msg) {
  var f, obj = {
    addresslocality: jspb.Message.getFieldWithDefault(msg, 1, ""),
    addresscountry: jspb.Message.getFieldWithDefault(msg, 2, ""),
    streetaddress: jspb.Message.getFieldWithDefault(msg, 3, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.cattlechain.DairyIdentity.ADDRESS}
 */
proto.cattlechain.DairyIdentity.ADDRESS.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.cattlechain.DairyIdentity.ADDRESS;
  return proto.cattlechain.DairyIdentity.ADDRESS.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.cattlechain.DairyIdentity.ADDRESS} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.cattlechain.DairyIdentity.ADDRESS}
 */
proto.cattlechain.DairyIdentity.ADDRESS.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setAddresslocality(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setAddresscountry(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setStreetaddress(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.cattlechain.DairyIdentity.ADDRESS.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.cattlechain.DairyIdentity.ADDRESS.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.cattlechain.DairyIdentity.ADDRESS} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.cattlechain.DairyIdentity.ADDRESS.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getAddresslocality();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getAddresscountry();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getStreetaddress();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
};


/**
 * optional string addressLocality = 1;
 * @return {string}
 */
proto.cattlechain.DairyIdentity.ADDRESS.prototype.getAddresslocality = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.cattlechain.DairyIdentity.ADDRESS} returns this
 */
proto.cattlechain.DairyIdentity.ADDRESS.prototype.setAddresslocality = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string addressCountry = 2;
 * @return {string}
 */
proto.cattlechain.DairyIdentity.ADDRESS.prototype.getAddresscountry = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.cattlechain.DairyIdentity.ADDRESS} returns this
 */
proto.cattlechain.DairyIdentity.ADDRESS.prototype.setAddresscountry = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string streetAddress = 3;
 * @return {string}
 */
proto.cattlechain.DairyIdentity.ADDRESS.prototype.getStreetaddress = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.cattlechain.DairyIdentity.ADDRESS} returns this
 */
proto.cattlechain.DairyIdentity.ADDRESS.prototype.setStreetaddress = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.cattlechain.DairyIdentity.LOCATION.repeatedFields_ = [2];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.cattlechain.DairyIdentity.LOCATION.prototype.toObject = function(opt_includeInstance) {
  return proto.cattlechain.DairyIdentity.LOCATION.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.cattlechain.DairyIdentity.LOCATION} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.cattlechain.DairyIdentity.LOCATION.toObject = function(includeInstance, msg) {
  var f, obj = {
    type: jspb.Message.getFieldWithDefault(msg, 1, ""),
    coordinatesList: (f = jspb.Message.getRepeatedFloatingPointField(msg, 2)) == null ? undefined : f
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.cattlechain.DairyIdentity.LOCATION}
 */
proto.cattlechain.DairyIdentity.LOCATION.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.cattlechain.DairyIdentity.LOCATION;
  return proto.cattlechain.DairyIdentity.LOCATION.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.cattlechain.DairyIdentity.LOCATION} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.cattlechain.DairyIdentity.LOCATION}
 */
proto.cattlechain.DairyIdentity.LOCATION.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setType(value);
      break;
    case 2:
      var value = /** @type {!Array<number>} */ (reader.readPackedFloat());
      msg.setCoordinatesList(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.cattlechain.DairyIdentity.LOCATION.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.cattlechain.DairyIdentity.LOCATION.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.cattlechain.DairyIdentity.LOCATION} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.cattlechain.DairyIdentity.LOCATION.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getType();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getCoordinatesList();
  if (f.length > 0) {
    writer.writePackedFloat(
      2,
      f
    );
  }
};


/**
 * optional string type = 1;
 * @return {string}
 */
proto.cattlechain.DairyIdentity.LOCATION.prototype.getType = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.cattlechain.DairyIdentity.LOCATION} returns this
 */
proto.cattlechain.DairyIdentity.LOCATION.prototype.setType = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * repeated float coordinates = 2;
 * @return {!Array<number>}
 */
proto.cattlechain.DairyIdentity.LOCATION.prototype.getCoordinatesList = function() {
  return /** @type {!Array<number>} */ (jspb.Message.getRepeatedFloatingPointField(this, 2));
};


/**
 * @param {!Array<number>} value
 * @return {!proto.cattlechain.DairyIdentity.LOCATION} returns this
 */
proto.cattlechain.DairyIdentity.LOCATION.prototype.setCoordinatesList = function(value) {
  return jspb.Message.setField(this, 2, value || []);
};


/**
 * @param {number} value
 * @param {number=} opt_index
 * @return {!proto.cattlechain.DairyIdentity.LOCATION} returns this
 */
proto.cattlechain.DairyIdentity.LOCATION.prototype.addCoordinates = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 2, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.cattlechain.DairyIdentity.LOCATION} returns this
 */
proto.cattlechain.DairyIdentity.LOCATION.prototype.clearCoordinatesList = function() {
  return this.setCoordinatesList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.cattlechain.DairyIdentity.RELATEDSOURCE.prototype.toObject = function(opt_includeInstance) {
  return proto.cattlechain.DairyIdentity.RELATEDSOURCE.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.cattlechain.DairyIdentity.RELATEDSOURCE} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.cattlechain.DairyIdentity.RELATEDSOURCE.toObject = function(includeInstance, msg) {
  var f, obj = {
    application: jspb.Message.getFieldWithDefault(msg, 1, ""),
    applicationentityid: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.cattlechain.DairyIdentity.RELATEDSOURCE}
 */
proto.cattlechain.DairyIdentity.RELATEDSOURCE.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.cattlechain.DairyIdentity.RELATEDSOURCE;
  return proto.cattlechain.DairyIdentity.RELATEDSOURCE.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.cattlechain.DairyIdentity.RELATEDSOURCE} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.cattlechain.DairyIdentity.RELATEDSOURCE}
 */
proto.cattlechain.DairyIdentity.RELATEDSOURCE.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setApplication(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setApplicationentityid(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.cattlechain.DairyIdentity.RELATEDSOURCE.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.cattlechain.DairyIdentity.RELATEDSOURCE.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.cattlechain.DairyIdentity.RELATEDSOURCE} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.cattlechain.DairyIdentity.RELATEDSOURCE.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getApplication();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getApplicationentityid();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * optional string application = 1;
 * @return {string}
 */
proto.cattlechain.DairyIdentity.RELATEDSOURCE.prototype.getApplication = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.cattlechain.DairyIdentity.RELATEDSOURCE} returns this
 */
proto.cattlechain.DairyIdentity.RELATEDSOURCE.prototype.setApplication = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string applicationEntityId = 2;
 * @return {string}
 */
proto.cattlechain.DairyIdentity.RELATEDSOURCE.prototype.getApplicationentityid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.cattlechain.DairyIdentity.RELATEDSOURCE} returns this
 */
proto.cattlechain.DairyIdentity.RELATEDSOURCE.prototype.setApplicationentityid = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string id = 1;
 * @return {string}
 */
proto.cattlechain.DairyIdentity.prototype.getId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.cattlechain.DairyIdentity} returns this
 */
proto.cattlechain.DairyIdentity.prototype.setId = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string type = 2;
 * @return {string}
 */
proto.cattlechain.DairyIdentity.prototype.getType = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.cattlechain.DairyIdentity} returns this
 */
proto.cattlechain.DairyIdentity.prototype.setType = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string dataCreated = 3;
 * @return {string}
 */
proto.cattlechain.DairyIdentity.prototype.getDatacreated = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.cattlechain.DairyIdentity} returns this
 */
proto.cattlechain.DairyIdentity.prototype.setDatacreated = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional string dataModified = 4;
 * @return {string}
 */
proto.cattlechain.DairyIdentity.prototype.getDatamodified = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * @param {string} value
 * @return {!proto.cattlechain.DairyIdentity} returns this
 */
proto.cattlechain.DairyIdentity.prototype.setDatamodified = function(value) {
  return jspb.Message.setProto3StringField(this, 4, value);
};


/**
 * optional string name = 5;
 * @return {string}
 */
proto.cattlechain.DairyIdentity.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/**
 * @param {string} value
 * @return {!proto.cattlechain.DairyIdentity} returns this
 */
proto.cattlechain.DairyIdentity.prototype.setName = function(value) {
  return jspb.Message.setProto3StringField(this, 5, value);
};


/**
 * optional string description = 6;
 * @return {string}
 */
proto.cattlechain.DairyIdentity.prototype.getDescription = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 6, ""));
};


/**
 * @param {string} value
 * @return {!proto.cattlechain.DairyIdentity} returns this
 */
proto.cattlechain.DairyIdentity.prototype.setDescription = function(value) {
  return jspb.Message.setProto3StringField(this, 6, value);
};


/**
 * optional CONTACTPOINT contactPoint = 7;
 * @return {?proto.cattlechain.DairyIdentity.CONTACTPOINT}
 */
proto.cattlechain.DairyIdentity.prototype.getContactpoint = function() {
  return /** @type{?proto.cattlechain.DairyIdentity.CONTACTPOINT} */ (
    jspb.Message.getWrapperField(this, proto.cattlechain.DairyIdentity.CONTACTPOINT, 7));
};


/**
 * @param {?proto.cattlechain.DairyIdentity.CONTACTPOINT|undefined} value
 * @return {!proto.cattlechain.DairyIdentity} returns this
*/
proto.cattlechain.DairyIdentity.prototype.setContactpoint = function(value) {
  return jspb.Message.setWrapperField(this, 7, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.cattlechain.DairyIdentity} returns this
 */
proto.cattlechain.DairyIdentity.prototype.clearContactpoint = function() {
  return this.setContactpoint(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.cattlechain.DairyIdentity.prototype.hasContactpoint = function() {
  return jspb.Message.getField(this, 7) != null;
};


/**
 * optional string ownedBy = 8;
 * @return {string}
 */
proto.cattlechain.DairyIdentity.prototype.getOwnedby = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 8, ""));
};


/**
 * @param {string} value
 * @return {!proto.cattlechain.DairyIdentity} returns this
 */
proto.cattlechain.DairyIdentity.prototype.setOwnedby = function(value) {
  return jspb.Message.setProto3StringField(this, 8, value);
};


/**
 * optional ADDRESS address = 9;
 * @return {?proto.cattlechain.DairyIdentity.ADDRESS}
 */
proto.cattlechain.DairyIdentity.prototype.getAddress = function() {
  return /** @type{?proto.cattlechain.DairyIdentity.ADDRESS} */ (
    jspb.Message.getWrapperField(this, proto.cattlechain.DairyIdentity.ADDRESS, 9));
};


/**
 * @param {?proto.cattlechain.DairyIdentity.ADDRESS|undefined} value
 * @return {!proto.cattlechain.DairyIdentity} returns this
*/
proto.cattlechain.DairyIdentity.prototype.setAddress = function(value) {
  return jspb.Message.setWrapperField(this, 9, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.cattlechain.DairyIdentity} returns this
 */
proto.cattlechain.DairyIdentity.prototype.clearAddress = function() {
  return this.setAddress(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.cattlechain.DairyIdentity.prototype.hasAddress = function() {
  return jspb.Message.getField(this, 9) != null;
};


/**
 * optional LOCATION location = 10;
 * @return {?proto.cattlechain.DairyIdentity.LOCATION}
 */
proto.cattlechain.DairyIdentity.prototype.getLocation = function() {
  return /** @type{?proto.cattlechain.DairyIdentity.LOCATION} */ (
    jspb.Message.getWrapperField(this, proto.cattlechain.DairyIdentity.LOCATION, 10));
};


/**
 * @param {?proto.cattlechain.DairyIdentity.LOCATION|undefined} value
 * @return {!proto.cattlechain.DairyIdentity} returns this
*/
proto.cattlechain.DairyIdentity.prototype.setLocation = function(value) {
  return jspb.Message.setWrapperField(this, 10, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.cattlechain.DairyIdentity} returns this
 */
proto.cattlechain.DairyIdentity.prototype.clearLocation = function() {
  return this.setLocation(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.cattlechain.DairyIdentity.prototype.hasLocation = function() {
  return jspb.Message.getField(this, 10) != null;
};


/**
 * repeated RELATEDSOURCE relatedSource = 11;
 * @return {!Array<!proto.cattlechain.DairyIdentity.RELATEDSOURCE>}
 */
proto.cattlechain.DairyIdentity.prototype.getRelatedsourceList = function() {
  return /** @type{!Array<!proto.cattlechain.DairyIdentity.RELATEDSOURCE>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.cattlechain.DairyIdentity.RELATEDSOURCE, 11));
};


/**
 * @param {!Array<!proto.cattlechain.DairyIdentity.RELATEDSOURCE>} value
 * @return {!proto.cattlechain.DairyIdentity} returns this
*/
proto.cattlechain.DairyIdentity.prototype.setRelatedsourceList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 11, value);
};


/**
 * @param {!proto.cattlechain.DairyIdentity.RELATEDSOURCE=} opt_value
 * @param {number=} opt_index
 * @return {!proto.cattlechain.DairyIdentity.RELATEDSOURCE}
 */
proto.cattlechain.DairyIdentity.prototype.addRelatedsource = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 11, opt_value, proto.cattlechain.DairyIdentity.RELATEDSOURCE, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.cattlechain.DairyIdentity} returns this
 */
proto.cattlechain.DairyIdentity.prototype.clearRelatedsourceList = function() {
  return this.setRelatedsourceList([]);
};


/**
 * repeated DairyMonitoring monitoring = 12;
 * @return {!Array<!proto.cattlechain.DairyMonitoring>}
 */
proto.cattlechain.DairyIdentity.prototype.getMonitoringList = function() {
  return /** @type{!Array<!proto.cattlechain.DairyMonitoring>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.cattlechain.DairyMonitoring, 12));
};


/**
 * @param {!Array<!proto.cattlechain.DairyMonitoring>} value
 * @return {!proto.cattlechain.DairyIdentity} returns this
*/
proto.cattlechain.DairyIdentity.prototype.setMonitoringList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 12, value);
};


/**
 * @param {!proto.cattlechain.DairyMonitoring=} opt_value
 * @param {number=} opt_index
 * @return {!proto.cattlechain.DairyMonitoring}
 */
proto.cattlechain.DairyIdentity.prototype.addMonitoring = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 12, opt_value, proto.cattlechain.DairyMonitoring, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.cattlechain.DairyIdentity} returns this
 */
proto.cattlechain.DairyIdentity.prototype.clearMonitoringList = function() {
  return this.setMonitoringList([]);
};


/**
 * repeated DairyWelfareIndicators indicators = 13;
 * @return {!Array<!proto.cattlechain.DairyWelfareIndicators>}
 */
proto.cattlechain.DairyIdentity.prototype.getIndicatorsList = function() {
  return /** @type{!Array<!proto.cattlechain.DairyWelfareIndicators>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.cattlechain.DairyWelfareIndicators, 13));
};


/**
 * @param {!Array<!proto.cattlechain.DairyWelfareIndicators>} value
 * @return {!proto.cattlechain.DairyIdentity} returns this
*/
proto.cattlechain.DairyIdentity.prototype.setIndicatorsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 13, value);
};


/**
 * @param {!proto.cattlechain.DairyWelfareIndicators=} opt_value
 * @param {number=} opt_index
 * @return {!proto.cattlechain.DairyWelfareIndicators}
 */
proto.cattlechain.DairyIdentity.prototype.addIndicators = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 13, opt_value, proto.cattlechain.DairyWelfareIndicators, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.cattlechain.DairyIdentity} returns this
 */
proto.cattlechain.DairyIdentity.prototype.clearIndicatorsList = function() {
  return this.setIndicatorsList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.cattlechain.DairyMonitoring.prototype.toObject = function(opt_includeInstance) {
  return proto.cattlechain.DairyMonitoring.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.cattlechain.DairyMonitoring} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.cattlechain.DairyMonitoring.toObject = function(includeInstance, msg) {
  var f, obj = {
    monitoring: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.cattlechain.DairyMonitoring}
 */
proto.cattlechain.DairyMonitoring.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.cattlechain.DairyMonitoring;
  return proto.cattlechain.DairyMonitoring.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.cattlechain.DairyMonitoring} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.cattlechain.DairyMonitoring}
 */
proto.cattlechain.DairyMonitoring.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setMonitoring(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.cattlechain.DairyMonitoring.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.cattlechain.DairyMonitoring.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.cattlechain.DairyMonitoring} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.cattlechain.DairyMonitoring.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getMonitoring();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string monitoring = 1;
 * @return {string}
 */
proto.cattlechain.DairyMonitoring.prototype.getMonitoring = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.cattlechain.DairyMonitoring} returns this
 */
proto.cattlechain.DairyMonitoring.prototype.setMonitoring = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.cattlechain.DairyWelfareIndicators.prototype.toObject = function(opt_includeInstance) {
  return proto.cattlechain.DairyWelfareIndicators.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.cattlechain.DairyWelfareIndicators} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.cattlechain.DairyWelfareIndicators.toObject = function(includeInstance, msg) {
  var f, obj = {
    indicator: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.cattlechain.DairyWelfareIndicators}
 */
proto.cattlechain.DairyWelfareIndicators.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.cattlechain.DairyWelfareIndicators;
  return proto.cattlechain.DairyWelfareIndicators.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.cattlechain.DairyWelfareIndicators} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.cattlechain.DairyWelfareIndicators}
 */
proto.cattlechain.DairyWelfareIndicators.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setIndicator(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.cattlechain.DairyWelfareIndicators.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.cattlechain.DairyWelfareIndicators.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.cattlechain.DairyWelfareIndicators} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.cattlechain.DairyWelfareIndicators.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getIndicator();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string indicator = 1;
 * @return {string}
 */
proto.cattlechain.DairyWelfareIndicators.prototype.getIndicator = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.cattlechain.DairyWelfareIndicators} returns this
 */
proto.cattlechain.DairyWelfareIndicators.prototype.setIndicator = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


goog.object.extend(exports, proto.cattlechain);
